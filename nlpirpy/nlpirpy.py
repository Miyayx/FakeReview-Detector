# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nlpirpy', [dirname(__file__)])
        except ImportError:
            import _nlpirpy
            return _nlpirpy
        if fp is not None:
            try:
                _mod = imp.load_module('_nlpirpy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _nlpirpy = swig_import_helper()
    del swig_import_helper
else:
    import _nlpirpy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


POS_MAP_NUMBER = _nlpirpy.POS_MAP_NUMBER
ICT_POS_MAP_FIRST = _nlpirpy.ICT_POS_MAP_FIRST
ICT_POS_MAP_SECOND = _nlpirpy.ICT_POS_MAP_SECOND
PKU_POS_MAP_SECOND = _nlpirpy.PKU_POS_MAP_SECOND
PKU_POS_MAP_FIRST = _nlpirpy.PKU_POS_MAP_FIRST
POS_SIZE = _nlpirpy.POS_SIZE
class result_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, result_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, result_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["start"] = _nlpirpy.result_t_start_set
    __swig_getmethods__["start"] = _nlpirpy.result_t_start_get
    if _newclass:start = _swig_property(_nlpirpy.result_t_start_get, _nlpirpy.result_t_start_set)
    __swig_setmethods__["length"] = _nlpirpy.result_t_length_set
    __swig_getmethods__["length"] = _nlpirpy.result_t_length_get
    if _newclass:length = _swig_property(_nlpirpy.result_t_length_get, _nlpirpy.result_t_length_set)
    __swig_setmethods__["sPOS"] = _nlpirpy.result_t_sPOS_set
    __swig_getmethods__["sPOS"] = _nlpirpy.result_t_sPOS_get
    if _newclass:sPOS = _swig_property(_nlpirpy.result_t_sPOS_get, _nlpirpy.result_t_sPOS_set)
    __swig_setmethods__["iPOS"] = _nlpirpy.result_t_iPOS_set
    __swig_getmethods__["iPOS"] = _nlpirpy.result_t_iPOS_get
    if _newclass:iPOS = _swig_property(_nlpirpy.result_t_iPOS_get, _nlpirpy.result_t_iPOS_set)
    __swig_setmethods__["word_ID"] = _nlpirpy.result_t_word_ID_set
    __swig_getmethods__["word_ID"] = _nlpirpy.result_t_word_ID_get
    if _newclass:word_ID = _swig_property(_nlpirpy.result_t_word_ID_get, _nlpirpy.result_t_word_ID_set)
    __swig_setmethods__["word_type"] = _nlpirpy.result_t_word_type_set
    __swig_getmethods__["word_type"] = _nlpirpy.result_t_word_type_get
    if _newclass:word_type = _swig_property(_nlpirpy.result_t_word_type_get, _nlpirpy.result_t_word_type_set)
    __swig_setmethods__["weight"] = _nlpirpy.result_t_weight_set
    __swig_getmethods__["weight"] = _nlpirpy.result_t_weight_get
    if _newclass:weight = _swig_property(_nlpirpy.result_t_weight_get, _nlpirpy.result_t_weight_set)
    def __init__(self): 
        this = _nlpirpy.new_result_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nlpirpy.delete_result_t
    __del__ = lambda self : None;
result_t_swigregister = _nlpirpy.result_t_swigregister
result_t_swigregister(result_t)

GBK_CODE = _nlpirpy.GBK_CODE
UTF8_CODE = _nlpirpy.UTF8_CODE
BIG5_CODE = _nlpirpy.BIG5_CODE
GBK_FANTI_CODE = _nlpirpy.GBK_FANTI_CODE

def NLPIR_Init(sDataPath=None, encode=0):
  return _nlpirpy.NLPIR_Init(sDataPath, encode)
NLPIR_Init = _nlpirpy.NLPIR_Init

def NLPIR_Exit():
  return _nlpirpy.NLPIR_Exit()
NLPIR_Exit = _nlpirpy.NLPIR_Exit

def NLPIR_ParagraphProcess(*args):
  return _nlpirpy.NLPIR_ParagraphProcess(*args)
NLPIR_ParagraphProcess = _nlpirpy.NLPIR_ParagraphProcess

def NLPIR_ParagraphProcessA(*args):
  return _nlpirpy.NLPIR_ParagraphProcessA(*args)
NLPIR_ParagraphProcessA = _nlpirpy.NLPIR_ParagraphProcessA

def NLPIR_GetParagraphProcessAWordCount(*args):
  return _nlpirpy.NLPIR_GetParagraphProcessAWordCount(*args)
NLPIR_GetParagraphProcessAWordCount = _nlpirpy.NLPIR_GetParagraphProcessAWordCount

def NLPIR_ParagraphProcessAW(*args):
  return _nlpirpy.NLPIR_ParagraphProcessAW(*args)
NLPIR_ParagraphProcessAW = _nlpirpy.NLPIR_ParagraphProcessAW

def NLPIR_FileProcess(*args):
  return _nlpirpy.NLPIR_FileProcess(*args)
NLPIR_FileProcess = _nlpirpy.NLPIR_FileProcess

def NLPIR_ImportUserDict(*args):
  return _nlpirpy.NLPIR_ImportUserDict(*args)
NLPIR_ImportUserDict = _nlpirpy.NLPIR_ImportUserDict

def NLPIR_AddUserWord(*args):
  return _nlpirpy.NLPIR_AddUserWord(*args)
NLPIR_AddUserWord = _nlpirpy.NLPIR_AddUserWord

def NLPIR_SaveTheUsrDic():
  return _nlpirpy.NLPIR_SaveTheUsrDic()
NLPIR_SaveTheUsrDic = _nlpirpy.NLPIR_SaveTheUsrDic

def NLPIR_DelUsrWord(*args):
  return _nlpirpy.NLPIR_DelUsrWord(*args)
NLPIR_DelUsrWord = _nlpirpy.NLPIR_DelUsrWord

def NLPIR_GetUniProb(*args):
  return _nlpirpy.NLPIR_GetUniProb(*args)
NLPIR_GetUniProb = _nlpirpy.NLPIR_GetUniProb

def NLPIR_IsWord(*args):
  return _nlpirpy.NLPIR_IsWord(*args)
NLPIR_IsWord = _nlpirpy.NLPIR_IsWord

def NLPIR_GetKeyWords(*args):
  return _nlpirpy.NLPIR_GetKeyWords(*args)
NLPIR_GetKeyWords = _nlpirpy.NLPIR_GetKeyWords

def NLPIR_GetFileKeyWords(*args):
  return _nlpirpy.NLPIR_GetFileKeyWords(*args)
NLPIR_GetFileKeyWords = _nlpirpy.NLPIR_GetFileKeyWords

def NLPIR_GetNewWords(*args):
  return _nlpirpy.NLPIR_GetNewWords(*args)
NLPIR_GetNewWords = _nlpirpy.NLPIR_GetNewWords

def NLPIR_GetFileNewWords(*args):
  return _nlpirpy.NLPIR_GetFileNewWords(*args)
NLPIR_GetFileNewWords = _nlpirpy.NLPIR_GetFileNewWords

def NLPIR_FingerPrint(*args):
  return _nlpirpy.NLPIR_FingerPrint(*args)
NLPIR_FingerPrint = _nlpirpy.NLPIR_FingerPrint

def NLPIR_SetPOSmap(*args):
  return _nlpirpy.NLPIR_SetPOSmap(*args)
NLPIR_SetPOSmap = _nlpirpy.NLPIR_SetPOSmap
class CNLPIR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNLPIR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNLPIR, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _nlpirpy.new_CNLPIR()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nlpirpy.delete_CNLPIR
    __del__ = lambda self : None;
    def FileProcess(self, *args): return _nlpirpy.CNLPIR_FileProcess(self, *args)
    def ParagraphProcess(self, *args): return _nlpirpy.CNLPIR_ParagraphProcess(self, *args)
    def ParagraphProcessA(self, *args): return _nlpirpy.CNLPIR_ParagraphProcessA(self, *args)
    def ParagraphProcessAW(self, *args): return _nlpirpy.CNLPIR_ParagraphProcessAW(self, *args)
    def GetParagraphProcessAWordCount(self, *args): return _nlpirpy.CNLPIR_GetParagraphProcessAWordCount(self, *args)
    def GetKeyWords(self, *args): return _nlpirpy.CNLPIR_GetKeyWords(self, *args)
    def GetFileKeyWords(self, *args): return _nlpirpy.CNLPIR_GetFileKeyWords(self, *args)
    def GetNewWords(self, *args): return _nlpirpy.CNLPIR_GetNewWords(self, *args)
    def GetFileNewWords(self, *args): return _nlpirpy.CNLPIR_GetFileNewWords(self, *args)
    def SetAvailable(self, bAvailable=True): return _nlpirpy.CNLPIR_SetAvailable(self, bAvailable)
    def IsAvailable(self): return _nlpirpy.CNLPIR_IsAvailable(self)
CNLPIR_swigregister = _nlpirpy.CNLPIR_swigregister
CNLPIR_swigregister(CNLPIR)


def GetActiveInstance():
  return _nlpirpy.GetActiveInstance()
GetActiveInstance = _nlpirpy.GetActiveInstance

def NLPIR_NWI_Start():
  return _nlpirpy.NLPIR_NWI_Start()
NLPIR_NWI_Start = _nlpirpy.NLPIR_NWI_Start

def NLPIR_NWI_AddFile(*args):
  return _nlpirpy.NLPIR_NWI_AddFile(*args)
NLPIR_NWI_AddFile = _nlpirpy.NLPIR_NWI_AddFile

def NLPIR_NWI_AddMem(*args):
  return _nlpirpy.NLPIR_NWI_AddMem(*args)
NLPIR_NWI_AddMem = _nlpirpy.NLPIR_NWI_AddMem

def NLPIR_NWI_Complete():
  return _nlpirpy.NLPIR_NWI_Complete()
NLPIR_NWI_Complete = _nlpirpy.NLPIR_NWI_Complete

def NLPIR_NWI_GetResult(bWeightOut=False):
  return _nlpirpy.NLPIR_NWI_GetResult(bWeightOut)
NLPIR_NWI_GetResult = _nlpirpy.NLPIR_NWI_GetResult

def NLPIR_NWI_Result2UserDict():
  return _nlpirpy.NLPIR_NWI_Result2UserDict()
NLPIR_NWI_Result2UserDict = _nlpirpy.NLPIR_NWI_Result2UserDict
# This file is compatible with both classic and new-style classes.


